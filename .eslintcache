[{"/Users/iseungjae/Desktop/ulcer-analysis-project/src/index.js":"1","/Users/iseungjae/Desktop/ulcer-analysis-project/src/reportWebVitals.js":"2","/Users/iseungjae/Desktop/ulcer-analysis-project/src/App.jsx":"3","/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/Header/Header.jsx":"4","/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/Side/Side.jsx":"5","/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/SideContent/SideContent.jsx":"6"},{"size":838,"mtime":1611401278627,"results":"7","hashOfConfig":"8"},{"size":375,"mtime":1611401278627,"results":"9","hashOfConfig":"8"},{"size":2268,"mtime":1611411113750,"results":"10","hashOfConfig":"8"},{"size":352,"mtime":1611401278626,"results":"11","hashOfConfig":"8"},{"size":4236,"mtime":1611412368980,"results":"12","hashOfConfig":"8"},{"size":2147,"mtime":1611401278627,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"su0swm",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/iseungjae/Desktop/ulcer-analysis-project/src/index.js",[],["29","30"],"/Users/iseungjae/Desktop/ulcer-analysis-project/src/reportWebVitals.js",[],"/Users/iseungjae/Desktop/ulcer-analysis-project/src/App.jsx",[],"/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/Header/Header.jsx",[],"/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/Side/Side.jsx",["31","32","33","34"],"import './Side.css'\r\nimport { React, useRef, useEffect, useState } from 'react';\r\nimport { Grid, ButtonGroup, Button ,CircularProgress} from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SideContent from '../SideContent/SideContent';\r\nimport { CloudUploadOutlined, SendOutlined } from '@material-ui/icons';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    buttonArray: {\r\n        width: '100%'\r\n    },\r\n    button: {\r\n        flex: 1,\r\n        color: '#c7c7c7',\r\n        borderColor: '#c7c7c7'\r\n    },\r\n    icon: {\r\n        marginRight: \"3px\",\r\n        width: \"0.7em\"\r\n    }\r\n}));\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default function Side({ onChangeFile, onFileButtonClick, onSendFile, resultData, setLoading, loading }) {\r\n    const fileRef = useRef();\r\n    const classes = useStyles();\r\n    const [sideContentArray, setSideContentArray] = useState([]);\r\n\r\n    function madeSideContent(result) {\r\n        if (result.length < 3) return [];\r\n        const resultArray = new Array;\r\n\r\n        result.sort((a, b) => Number.parseInt(b.value) - Number.parseInt(a.value));\r\n\r\n\r\n        resultArray.push({\r\n            title: \"Differential diganosis\",\r\n            mainValue: `${Object.keys(result[0][0])} : ${result[0].value}%`,\r\n            subValue: [\r\n                `${Object.keys(result[1][0])} : ${result[1].value}%`,\r\n                `${Object.keys(result[2][0])} : ${result[2].value}%`\r\n            ]\r\n        })\r\n\r\n        if (Object.keys(result[0][0]) == \"EGC\") {\r\n            const { T1a, T1b } = result[0].depth;\r\n\r\n            resultArray.push({\r\n                title: \"Depth of invasion in EGC\",\r\n                mainValue: `${T1a > T1b ?\r\n                    \"T1a : \" + T1a.value + \"%\" :\r\n                    \"T1b : \" + T1b.value + \"%\"}`,\r\n                subValue: [`${T1a < T1b ?\r\n                    \"T1a : \" + T1a.value + \"%\" :\r\n                    \"T1b : \" + T1b.value + \"%\"}`]\r\n            })\r\n        }\r\n        return resultArray\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setSideContentArray(madeSideContent(resultData));\r\n        setLoading(false);\r\n        return () => {\r\n\r\n        }\r\n    }, [resultData])\r\n\r\n    return (\r\n        <aside className=\"side\">\r\n            <input ref={fileRef} hidden={true} id=\"file\" type='file' onChange={onChangeFile}></input>\r\n            <Grid container spacing={3}>\r\n                <Grid item xs={12}>\r\n                    <ButtonGroup\r\n                        className={classes.buttonArray}\r\n                        variant=\"text\" size=\"small\"\r\n                        aria-label=\"text primary button group\">\r\n                        <Button className={classes.button} onClick={(e) => {\r\n                            onFileButtonClick(e, fileRef);\r\n                        }}>\r\n                            <CloudUploadOutlined className={classes.icon}></CloudUploadOutlined>\r\n                            UPLOAD</Button>\r\n                        <Button className={classes.button} onClick={(e) => {\r\n                            onSendFile(e);\r\n                        }}>\r\n                            <SendOutlined className={classes.icon}></SendOutlined>\r\n                            SEND</Button>\r\n                    </ButtonGroup>\r\n                    <hr></hr>\r\n                </Grid>\r\n                {loading ? <div className = \"loading-rapping\"><CircularProgress /></div> : \r\n                    sideContentArray.map(sideContent =>\r\n                        <SideContent\r\n                            title={sideContent.title}\r\n                            mainValue={sideContent.mainValue}\r\n                            subValue={sideContent.subValue}\r\n                        ></SideContent>)\r\n                }\r\n                {/* <SideContent\r\n                    title = \"Differential diganosis\"\r\n                    mainValue = \"EGC : 78.2%\"\r\n                    subValue = {[\"AGC : 24.6%\", \"BGU : 13.0%\"]}\r\n                ></SideContent>\r\n                <SideContent\r\n                    title = \"Depth of invasion in EGC\"\r\n                    mainValue = \"T1b : 78.2%\"\r\n                    subValue = {[\"T1a : 21.8%\"]}\r\n                ></SideContent> */}\r\n                {/*  */}\r\n            </Grid>\r\n        </aside>\r\n    )\r\n}\r\n","/Users/iseungjae/Desktop/ulcer-analysis-project/src/Container/SideContent/SideContent.jsx",[],["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":36,"column":29,"nodeType":"43","messageId":"44","endLine":36,"endColumn":38,"fix":"45"},{"ruleId":"46","severity":1,"message":"47","line":36,"column":29,"nodeType":"43","messageId":"48","endLine":36,"endColumn":38},{"ruleId":"49","severity":1,"message":"50","line":50,"column":39,"nodeType":"51","messageId":"52","endLine":50,"endColumn":41},{"ruleId":"53","severity":1,"message":"54","line":74,"column":8,"nodeType":"55","endLine":74,"endColumn":20,"suggestions":"56"},{"ruleId":"37","replacedBy":"57"},{"ruleId":"39","replacedBy":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"61","text":"62"},"no-array-constructor","The array literal notation [] is preferable.","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setLoading'. Either include it or remove the dependency array. If 'setLoading' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["63"],["59"],["60"],"no-global-assign","no-unsafe-negation",[1005,1005],"()",{"desc":"64","fix":"65"},"Update the dependencies array to be: [resultData, setLoading]",{"range":"66","text":"67"},[2144,2156],"[resultData, setLoading]"]